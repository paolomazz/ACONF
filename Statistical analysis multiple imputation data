
##get pooled means and standard deviations of cont vars
pool_mean1 <- with(binlogtestIMP_long, by(binlogtestIMP_long, .imp, function(x) c(mean(x$rs175), sd(x$rs175))))
pool_mean1
Reduce("+",pool_mean1)/length(pool_mean1)

pool_mean2 <- with(binlogtestIMP_long, by(binlogtestIMP_long, .imp, function(x) c(mean(x$rs179), sd(x$rs179))))
pool_mean2
Reduce("+",pool_mean2)/length(pool_mean2)

pool_mean3 <- with(binlogtestIMP_long, by(binlogtestIMP_long, .imp, function(x) c(mean(x$rs180), sd(x$rs180))))
pool_mean3
Reduce("+",pool_mean3)/length(pool_mean3)

pool_mean4 <- with(binlogtestIMP_long, by(binlogtestIMP_long, .imp, function(x) c(mean(x$rs181), sd(x$rs181))))
pool_mean4
Reduce("+",pool_mean4)/length(pool_mean4)

pool_mean5 <- with(binlogtestIMP_long, by(binlogtestIMP_long, .imp, function(x) c(mean(x$TotalRutterA), sd(x$TotalRutterA))))
pool_mean5
Reduce("+",pool_mean5)/length(pool_mean5)

##conduct a chi-square for imputed datasets 1, 5, 10, 20 
##chisquare
sextab1 <- table(dataset1$fs030, dataset1$fs004)
chisq.test(dataset1$fs030, dataset1$fs004)
oddsratio(sextab1,method = "wald")
sextab5 <- table(dataset5$fs030, dataset5$fs004)
chisq.test(dataset5$fs030, dataset1$fs004)
oddsratio(sextab5,method = "wald")
sextab10 <- table(dataset10$fs030, dataset10$fs004)
chisq.test(dataset10$fs030, dataset10$fs004)
oddsratio(sextab10,method = "wald")
sextab20 <- table(dataset20$fs030, dataset20$fs004)
chisq.test(dataset20$fs030, dataset20$fs004)
odds_ratio(sextab20,method = "wald")


fs071tab1 <- table(dataset1$fs030, dataset1$fs071)
chisq.test(dataset1$fs030, dataset1$fs071)
oddsratio(fs071tab1,method = "wald")
fs071tab5 <- table(dataset5$fs030, dataset5$fs071)
chisq.test(dataset5$fs030, dataset5$fs071)
oddsratio(fs071tab5,method = "wald")
fs071tab10 <- table(dataset10$fs030, dataset10$fs071)
chisq.test(dataset10$fs030, dataset10$fs071)
oddsratio(fs071tab10,method = "wald")
fs071tab20 <- table(dataset20$fs030, dataset20$fs071)
chisq.test(dataset20$fs030, dataset20$fs071)
oddsratio(fs071tab20,method = "wald")

peertab1 <- table(dataset1$fs030, dataset1$peerstat)
chisq.test(dataset1$fs030, dataset1$peerstat)
oddsratio(peertab1,method = "wald")
peertab5 <- table(dataset5$fs030, dataset5$peerstat)
chisq.test(dataset5$fs030, dataset5$peerstat)
oddsratio(peertab5,method = "wald")
peertab10 <- table(dataset10$fs030, dataset10$peerstat)
chisq.test(dataset10$fs030, dataset10$peerstat)
oddsratio(peertab10,method = "wald")
peertab20 <- table(dataset20$fs030, dataset20$peerstat)
chisq.test(dataset20$fs030, dataset20$peerstat)
oddsratio(peertab20,method = "wald")

q1073tab1 <- table(dataset1$fs030, dataset1$q1073)
chisq.test(dataset1$fs030, dataset1$q1073)
oddsratio(q1073tab1, method = "wald")
q1073tab5 <- table(dataset5$fs030, dataset5$q1073)
chisq.test(dataset5$fs030, dataset5$q1073)
oddsratio(q1073tab5, method = "wald")
q1073tab10 <- table(dataset10$fs030, dataset10$q1073)
chisq.test(dataset10$fs030, dataset10$q1073)
oddsratio(q1073tab10, method = "wald")
q1073tab20 <- table(dataset20$fs030, dataset20$q1073)
chisq.test(dataset20$fs030, dataset20$q1073)
oddsratio(q1073tab20, method = "wald")

edtab1 <- table(dataset1$fs030, dataset1$EdAtt)
chisq.test(dataset1$fs030, dataset1$EdAtt)
oddsratio(edtab1,method = "wald")
edtab5 <- table(dataset5$fs030, dataset5$EdAtt)
chisq.test(dataset5$fs030, dataset5$EdAtt)
oddsratio(edtab5,method = "wald")
edtab10 <- table(dataset10$fs030, dataset10$EdAtt)
chisq.test(dataset10$fs030, dataset10$EdAtt)
oddsratio(edtab10,method = "wald")
edtab20 <- table(dataset20$fs030, dataset20$EdAtt)
chisq.test(dataset20$fs030, dataset20$EdAtt)
oddsratio(edtab20,method = "wald")

fsestab1 <- table(dataset1$fs030, dataset1$f_rgsc91)
chisq.test(dataset1$fs030, dataset1$f_rgsc91)
oddsratio(fsestab1,method = "wald")
fsestab5 <- table(dataset5$fs030, dataset5$f_rgsc91)
chisq.test(dataset5$fs030, dataset5$f_rgsc91)
oddsratio(fsestab5,method = "wald")
fsestab10 <- table(dataset10$fs030, dataset10$f_rgsc91)
chisq.test(dataset10$fs030, dataset10$f_rgsc91)
oddsratio(fsestab10,method = "wald")
fsestab20 <- table(dataset20$fs030, dataset20$f_rgsc91)
chisq.test(dataset20$fs030, dataset20$f_rgsc91)
oddsratio(fsestab20,method = "wald")

asestab1 <- table(dataset1$fs030, dataset1$q1rg91)
chisq.test(dataset1$fs030, dataset1$q1rg91)
oddsratio(asestab1,method = "wald")
asestab5 <- table(dataset5$fs030, dataset5$q1rg91)
chisq.test(dataset5$fs030, dataset5$q1rg91)
oddsratio(asestab5,method = "wald")
asestab10 <- table(dataset10$fs030, dataset10$q1rg91)
chisq.test(dataset110$fs030, dataset10$q1rg91)
oddsratio(asestab10,method = "wald")
asestab20 <- table(dataset20$fs030, dataset20$q1rg91)
chisq.test(dataset20$fs030, dataset20$q1rg91)
oddsratio(asestab20,method = "wald")


##conduct t-test estimate for imputed data and pool
mi.t.test(dataset.imp, x ="TotalRutterA", y = "fs030")
fit.t.test1 <- with(data=binlogtestIMP, exp=lm(TotalRutterA ~ fs030))
t.test.estimates1 <- pool(fit.t.test1)
summary(t.test.estimates1)

mi.t.test(dataset.imp, x ="rs175", y = "fs030")
fit.t.test2 <- with(data=binlogtestIMP, exp=lm(rs175 ~ fs030))
t.test.estimates2 <- pool(fit.t.test2)
summary(t.test.estimates2)
cohens_d(t.test.estimates2)

mi.t.test(dataset.imp, x ="rs179", y = "fs030")
fit.t.test3 <- with(data=binlogtestIMP, exp=lm(rs179 ~ fs030))
t.test.estimates3 <- pool(fit.t.test3)
summary(t.test.estimates3)

mi.t.test(dataset.imp, x ="rs180", y = "fs030")
fit.t.test4 <- with(data=binlogtestIMP, exp=lm(rs180 ~ fs030))
t.test.estimates4 <- pool(fit.t.test4)
summary(t.test.estimates4)

mi.t.test(dataset.imp, x ="rs181", y = "fs030")
fit.t.test5 <- with(data=binlogtestIMP, exp=lm(rs181 ~ fs030))
t.test.estimates5 <- pool(fit.t.test5)
summary(t.test.estimates5)

##conduct chisquare test on categorical imputed data and pool
library(miceadds)
chi1 <- with(binlogtestIMP, chisq.test(fs030, fs004, correct=FALSE))
chi1
lapply(chi1$analyses, '[', 'statistic')
dk1 <- c(0.3204, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204, 0.3204)
dk1.combine <- micombine.chisquare(dk=dk1, df=1, display=TRUE, version=1)
ep_sex <- with( data = binlogtestIMP, glm(fs004 ~ fs030, family = binomial(link="logit")))
summary(ep_sex)
poolepsex <- summary(pool(ep_sex), conf.int = TRUE, exponentiate = TRUE)
poolepsex

chi2 <- with(binlogtestIMP, chisq.test(fs030, fs071, correct=FALSE))
chi2
lapply(chi2$analyses, '[', 'statistic')
dk2 <- c(0.002456567, 0.05595806, 0.009620191, 0.04696141, 0.09379976, 0.02479965, 0.002456567, 0.009620191, 0.1321195, 0.004762252, 0.1252993, 0.03877383, 0.4732543, 0.03498137, 0.04696141, 0.03138873, 0.0427669, 0.2332652, 0.02799509, 0.007815251)
dk2.comb <- micombine.chisquare(dk=dk2, df=1, display=TRUE, version=1)
ep_ph <- with( data = binlogtestIMP, glm(fs071 ~ fs030, family = binomial(link="logit")))
summary(ep_ph)
poolepph <- summary(pool(ep_ph), conf.int = TRUE, exponentiate = TRUE)
poolepph


chi3 <- with(binlogtestIMP, chisq.test(fs030, peerstat, correct = FALSE))
chi3
lapply(chi3$analyses, '[', 'statistic')
dk3 <- c(1.107727, 0.6884642, 1.574886, 0.2810818, 3.052043, 2.389598, 0.07257418, 0.1320353, 0.2711239, 0.2423856, 1.087317, 9.113567e-05, 0.5812656, 0.6108876, 0.4280756, 0.93161, 0.01443672, 2.483233, 0.4577508, 1.726669)
dk3.comb <- micombine.chisquare(dk=dk3, df=1, display=TRUE, version=1)
ep_peer <- with( data = binlogtestIMP, glm(peerstat ~ fs030, family = binomial(link="logit")))
summary(ep_peer)
pooleppeer <- summary(pool(ep_peer), conf.int = TRUE, exponentiate = TRUE)
pooleppeer


chi4 <- with(binlogtestIMP, chisq.test(fs030, q1073, correct = FALSE))
lapply(chi4$analyses, '[', 'statistic')
dk4 <- c(0.2966763 , 2.814145, 2.298081, 0.8424846, 0.5044397, 1.197839, 1.624591, 2.019278, 2.107242, 1.264266, 2.545135, 2.848924, 1.574886, 0.3750988, 4.706342, 1.525538, 3.580836, 5.533642, 3.052043, 0.823231)
dk4.comb <- micombine.chisquare(dk=dk4, df=1, display=TRUE, version=1)
ep_alc <- with( data = binlogtestIMP, glm(q1073 ~ fs030, family = binomial(link="logit")))
summary(ep_alc)
poolepalc <- summary(pool(ep_alc), conf.int = TRUE, exponentiate = TRUE)
poolepalc

chi5 <- with(binlogtestIMP, chisq.test(fs030, EdAtt, correct = FALSE))
lapply(chi5$analyses, '[', 'statistic')
dk5 <- c(4.941577, 8.175107, 5.311482, 8.298241, 6.763507, 8.392935, 4.438608, 7.152103, 6.732094, 11.16612, 4.567845, 8.257224, 4.95824, 8.635976, 6.885923, 2.409907, 3.589219, 5.196242, 6.514291, 5.282639)
dk5.comb <- micombine.chisquare(dk=dk5, df=2, display=TRUE, version=1)
ep_edatt <- with( data = binlogtestIMP, glm(EdAtt ~ fs030, family = binomial(link="logit")))
summary(ep_edatt)
poolepedatt <- summary(pool(ep_edatt), conf.int = TRUE, exponentiate = TRUE)
poolepedatt


chi6 <- with(binlogtestIMP, chisq.test(fs030, f_rgsc91, correct = FALSE))
lapply(chi6$analyses, '[', 'statistic')
dk6 <- c(0.6469898, 3.431766, 6.941262, 3.082302, 4.851368, 0.8779701, 1.556446, 4.266635, 9.09248, 15.04168, 1.347971, 0.6928585, 5.649209, 1.271605, 2.721433, 0.07798749, 5.550187, 4.432933, 0.9359989, 2.084497)
dk6.comb <- micombine.chisquare(dk=dk6, df=4, display=TRUE, version=1)
ep_SESch <- with( data = binlogtestIMP, glm(f_rgsc91 ~ fs030, family = binomial(link="logit")))
summary(ep_SESch)
poolepSESch <- summary(pool(ep_SESch), conf.int = TRUE, exponentiate = TRUE)
poolepSESch


chi7 <- with(binlogtestIMP, chisq.test(fs030, q1rg91, correct = FALSE))
lapply(chi7$analyses, '[', 'statistic')
dk7 <- c(4.537438, 2.310056, 0.187187, 2.109506, 3.228915, 0.001204907, 1.46251, 8.963126, 1.303466, 3.863768, 3.938924, 2.868496, 1.608764, 2.016245, 0.689147, 0.1060457, 1.840575, 1.238061, 0.6057707, 8.357385)
dk7.comb <- micombine.chisquare(dk=dk7, df=4, display=TRUE, version=1)
ep_SESad <- with( data = binlogtestIMP, glm(q1rg91 ~ fs030, family = binomial(link="logit")))
summary(ep_SESad)
poolepSESad <- summary(pool(ep_SESad), conf.int = TRUE, exponentiate = TRUE)
poolepSESad


##install packages and conduct binariy logistic regression
##assumption 2, independence of observations - MLM required for clusted data
install.packages("lme4")
library(lme4)
install.packages("car")
install.packages("ggplot2")
install.packages("nlme")
install.packages("reshape")
library(car)
library(ggplot2)
library(nlme)
library(reshape)

install.packages("MASS")
library(MASS)
install.packages("stats")
library(stats)


##conduct Binary logistic regression on imputed datasets 1, 5, 10, 20 to check if multicollinearity a potential problem
adfit1 <- glm(q1rg91 ~ fs030 + fs071 + peerstat + q1073 + EdAtt + f_rgsc91 + rs175 + rs179 + rs180 + rs181 + TotalRutterA + fs004, family = binomial(link="logit"), data = dataset1)
summary(adfit1)
AIC(logLik(adfit1))
BIC(logLik(adfit1))
PseudoR2(adfit1)
ctable <- exp(coef(summary(adfit1)))
print(ctable)
check.collin(adfit1)
parameters::model_parameters(adfit1, exp = TRUE)

##check residuals of 1st imputed dataset
dataset1$residuals <- resid(adfit1)
dataset1$standardized.residuals <- rstandard(adfit1)
dataset1$studentized.residuals <- rstudent(adfit1)
dataset1$cooks.distance <- cooks.distance(adfit1)
dataset1$dfbeta <- dfbeta(adfit1)
dataset1$dffit <- dffits(adfit1)
dataset1$leverage <- hatvalues(adfit1)
dataset1$covariance.ratios <- covratio(adfit1)
dataset1
dataset1$standardized.residuals > 2 | dataset1$standardized.residuals < -2
round(dataset1, digits = 3)
dataset1$large.residual <- dataset1$standardized.residuals > 2 | dataset1$standardized.residuals < -2
sum(dataset1$large.residual)
dataset1[dataset1$large.residual, c("fs030", "fs071", "peerstat", "q1073", "EdAtt", "f_rgsc91", "rs175", "rs179", "rs180", "rs181", "TotalRutterA", "fs004", "standardized.residuals")]
dataset1[dataset1$large.residual, c("cooks.distance", "leverage", "covariance.ratios", "standardized.residuals", "studentized.residuals", "dfbeta")]

##Assess linearity of the logit for cont.var
dataset1$logrs175 <- log(dataset1$rs175)*dataset1$rs175
dataset1$logrs179 <- log(dataset1$rs179)*dataset1$rs179
dataset1$logrs180 <- log(dataset1$rs180)*dataset1$rs180
dataset1$logrs181 <- log(dataset1$rs181)*dataset1$rs181
dataset1$logTotalRutterA <- log(dataset1$TotalRutterA)*dataset1$TotalRutterA

penaltyTest.1 <- glm(q1rg91 ~ fs030 + fs071 + peerstat + q1073 + EdAtt + f_rgsc91 + rs175 + rs179 + rs180 + rs181 + TotalRutterA + fs004 + logrs175 + logrs179 + logrs180 + logrs181 + logTotalRutterA, family = binomial(link="logit"), data = dataset1)
summary(penaltyTest.1)

##Conduct an adjusted binary logistic regression on imputed dataset 5
adfit5 <- glm(q1rg91 ~ fs030 + fs071 + peerstat + q1073 + EdAtt + f_rgsc91 + rs175 + rs179 + rs180 + rs181 + TotalRutterA + fs004, family = binomial(link="logit"), data = dataset5)
summary(adfit5)
AIC(logLik(adfit5))
BIC(logLik(adfit5))
PseudoR2(adfit5)
ctable <- exp(coef(summary(adfit5)))
print(ctable)
check.collin(adfit5)
parameters::model_parameters(adfit5, exp = TRUE)

##check residuals of 5th imputed dataset

dataset5$residuals <- resid(adfit5)
dataset5$standardized.residuals <- rstandard(adfit5)
dataset5$studentized.residuals <- rstudent(adfit5)
dataset5$cooks.distance <- cooks.distance(adfit5)
dataset5$dfbeta <- dfbeta(adfit5)
dataset5$dffit <- dffits(adfit5)
dataset5$leverage <- hatvalues(adfit5)
dataset5$covariance.ratios <- covratio(adfit5)
dataset5
dataset5$standardized.residuals > 2 | dataset5$standardized.residuals < -2
round(dataset5, digits = 3)
dataset5$large.residual <- dataset5$standardized.residuals > 2 | dataset5$standardized.residuals < -2
sum(dataset5$large.residual)
dataset5[dataset5$large.residual, c("fs030", "fs071", "peerstat", "q1073", "EdAtt", "f_rgsc91", "rs175", "rs179", "rs180", "rs181", "TotalRutterA", "fs004", "standardized.residuals")]
dataset5[dataset5$large.residual, c("cooks.distance", "leverage", "covariance.ratios", "standardized.residuals", "studentized.residuals", "dfbeta")]

##Assess linearity of the logit for cont.var
dataset5$logrs175 <- log(dataset5$rs175)*dataset5$rs175
dataset5$logrs179 <- log(dataset5$rs179)*dataset5$rs179
dataset5$logrs180 <- log(dataset5$rs180)*dataset5$rs180
dataset5$logrs181 <- log(dataset5$rs181)*dataset5$rs181
dataset5$logTotalRutterA <- log(dataset5$TotalRutterA)*dataset5$TotalRutterA

penaltyTest.5 <- glm(q1rg91 ~ fs030 + fs071 + peerstat + q1073 + EdAtt + f_rgsc91 + rs175 + rs179 + rs180 + rs181 + TotalRutterA + fs004 + logrs175 + logrs179 + logrs180 + logrs181 + logTotalRutterA, family = binomial(link="logit"), data = dataset5)
summary(penaltyTest.5)

##Conduct a binary regression on dataset 10
adfit10 <- glm(q1rg91 ~ fs030 + fs071 + peerstat + q1073 + EdAtt + f_rgsc91 + rs175 + rs179 + rs180 + rs181 + TotalRutterA + fs004, family = binomial(link="logit"), data = dataset10)
summary(adfit10)
AIC(logLik(adfit10))
BIC(logLik(adfit10))
PseudoR2(adfit10)
ctable <- exp(coef(summary(adfit10)))
print(ctable)
check.collin(adfit10)
parameters::model_parameters(adfit10, exp = TRUE)

##check residuals of 10th imputed dataset
dataset10$residuals <- resid(adfit10)
dataset10$standardized.residuals <- rstandard(adfit10)
dataset10$studentized.residuals <- rstudent(adfit10)
dataset10$cooks.distance <- cooks.distance(adfit10)
dataset10$dfbeta <- dfbeta(adfit10)
dataset10$dffit <- dffits(adfit10)
dataset10$leverage <- hatvalues(adfit10)
dataset10$covariance.ratios <- covratio(adfit10)
dataset10
dataset10$standardized.residuals > 2 | dataset10$standardized.residuals < -2
round(dataset10, digits = 3)
dataset10$large.residual <- dataset10$standardized.residuals > 2 | dataset10$standardized.residuals < -2
sum(dataset10$large.residual)
dataset10[dataset10$large.residual, c("fs030", "fs071", "peerstat", "q1073", "EdAtt", "f_rgsc91", "rs175", "rs179", "rs180", "rs181", "TotalRutterA", "fs004", "standardized.residuals")]
dataset10[dataset10$large.residual, c("cooks.distance", "leverage", "covariance.ratios", "standardized.residuals", "studentized.residuals", "dfbeta")]

##Assess linearity of the logit for cont.var
dataset10$logrs175 <- log(dataset10$rs175)*dataset10$rs175
dataset10$logrs179 <- log(dataset10$rs179)*dataset10$rs179
dataset10$logrs180 <- log(dataset10$rs180)*dataset10$rs180
dataset10$logrs181 <- log(dataset10$rs181)*dataset10$rs181
dataset10$logTotalRutterA <- log(dataset10$TotalRutterA)*dataset10$TotalRutterA

penaltyTest.10 <- glm(q1rg91 ~ fs030 + fs071 + peerstat + q1073 + EdAtt + f_rgsc91 + rs175 + rs179 + rs180 + rs181 + TotalRutterA + fs004 + logrs175 + logrs179 + logrs180 + logrs181 + logTotalRutterA, family = binomial(link="logit"), data = dataset10)
summary(penaltyTest.10)

##Conduct binary regression on dataset 20
adfit20 <- glm(q1rg91 ~ fs030 + fs071 + peerstat + q1073 + EdAtt + f_rgsc91 + rs175 + rs179 + rs180 + rs181 + TotalRutterA + fs004, family = binomial(link="logit"), data = dataset20)
summary(adfit20)
AIC(logLik(adfit20))
BIC(logLik(adfit20))
PseudoR2(adfit20)
ctable <- exp(coef(summary(adfit20)))
print(ctable)
check.collin(adfit20)
parameters::model_parameters(adfit20, exp = TRUE)

##check residuals of 20th imputed dataset
dataset20$residuals <- resid(adfit20)
dataset20$standardized.residuals <- rstandard(adfit20)
dataset20$studentized.residuals <- rstudent(adfit20)
dataset20$cooks.distance <- cooks.distance(adfit20)
dataset20$dfbeta <- dfbeta(adfit20)
dataset20$dffit <- dffits(adfit20)
dataset20$leverage <- hatvalues(adfit20)
dataset20$covariance.ratios <- covratio(adfit20)
dataset20
dataset20$standardized.residuals > 2 | dataset20$standardized.residuals < -2
round(dataset20, digits = 3)
dataset20$large.residual <- dataset20$standardized.residuals > 2 | dataset20$standardized.residuals < -2
sum(dataset20$large.residual)
dataset20[dataset20$large.residual, c("fs030", "fs071", "peerstat", "q1073", "EdAtt", "f_rgsc91", "rs175", "rs179", "rs180", "rs181", "TotalRutterA", "fs004", "standardized.residuals")]
dataset20[dataset20$large.residual, c("cooks.distance", "leverage", "covariance.ratios", "standardized.residuals", "studentized.residuals", "dfbeta")]

##Assess linearity of the logit for cont.var
dataset20$logrs175 <- log(dataset20$rs175)*dataset20$rs175
dataset20$logrs179 <- log(dataset20$rs179)*dataset20$rs179
dataset20$logrs180 <- log(dataset20$rs180)*dataset20$rs180
dataset20$logrs181 <- log(dataset20$rs181)*dataset20$rs181
dataset20$logTotalRutterA <- log(dataset20$TotalRutterA)*dataset20$TotalRutterA

penaltyTest.20 <- glm(q1rg91 ~ fs030 + fs071 + peerstat + q1073 + EdAtt + f_rgsc91 + rs175 + rs179 + rs180 + rs181 + TotalRutterA + fs004 + logrs175 + logrs179 + logrs180 + logrs181 + logTotalRutterA, family = binomial(link="logit"), data = dataset20)
summary(penaltyTest.20)

##conduct binariy logistic regression on pooled imputed data
unfit <- with(data = binlogtestIMP, glm(q1rg91 ~ fs030, family = binomial(link="logit")))
summary(unfit)
poolunfit <- summary(pool(unfit), conf.int = TRUE, exponentiate = TRUE)
poolunfit

adfit <- with(data = binlogtestIMP, exp = stats::glm(q1rg91 ~ fs030 + fs071 + peerstat + q1073 + EdAtt + f_rgsc91 + rs175 + rs179 + rs180 + rs181 + TotalRutterA + fs004, family = binomial(link="logit")))
pooladfit <- summary(pool(adfit), conf.int = TRUE, exponentiate = TRUE)
pooladfit
summary(pooladfit)

##compare model parameters between CC and imp 1, 5, 10, 20
parameters::model_parameters(CCadfit, exp = TRUE)
parameters::model_parameters(adfit1, exp = TRUE)
parameters::model_parameters(adfit5, exp = TRUE)
parameters::model_parameters(adfit10, exp = TRUE)
parameters::model_parameters(adfit20, exp = TRUE)

##MEAN AIC, BIC, PseudoR2 for 1, 5, 10, 20th IMPUTED estimates
AIC1 <- AIC(logLik(adfit1))
AIC5 <- AIC(logLik(adfit5))
AIC10 <- AIC(logLik(adfit10))
AIC20 <- AIC(logLik(adfit20))
meanAIC <- (AIC1 + AIC5 + AIC10 + AIC20)/4
meanAIC
BIC1 <- BIC(logLik(adfit1))
BIC5 <- BIC(logLik(adfit5))
BIC10 <- BIC(logLik(adfit10))
BIC20 <- BIC(logLik(adfit20))
meanBIC <- (BIC1 + BIC5 + BIC10 + BIC20)/4
meanBIC
Pseudo1 <- PseudoR2(adfit1)
Pseudo5 <- PseudoR2(adfit5)
Pseudo10 <- PseudoR2(adfit10)
Pseudo20 <- PseudoR2(adfit20)
meanPseudo <- (Pseudo1 + Pseudo5 + Pseudo10 + Pseudo20)/4
meanPseudo

##conduct binariy logistic regression with 2 levels, randome slope, random intercept on pooled imputed data
fit1 <- with(data = binlogtestIMP, exp = lme4::glmer(q1rg91 ~ fs030 + fs071 + peerstat + q1073 + q1098_total + f_rgsc91 + rs175 + rs179 + rs180 + rs181 + TotalRutterA + (fs004 | fs004), family = binomial(link="logit"), control = glmerControl(optimizer = "bobyqa"), nAGQ = 0))
summary(fit1)
summary(pool(fit1), conf.int = TRUE, exponentiate = TRUE)

##scatterplot 
library(dplyr)
binlogtestna <- na.omit(binlogtest)
ccfit2 <- glmer(q1rg91 ~ fs030 + fs071 + peerstat + q1073 + q1098_total + f_rgsc91 + rs175 + rs179 + rs180 + rs181 + TotalRutterA + (fs004 | fs004), data = binlogtest2, family = binomial(link="logit"), control = glmerControl(optimizer = "bobyqa"), nAGQ = 0)
summary(ccfit2)
probabilities <- predict(ccfit2, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, "pos", "neg")
mydata <- binlogtest2 %>%
  dplyr::select_if(is.numeric)
predictors <- colnames(mydata)
mydata <- mydata %>%
  mutate(logit = log(probabilities/(1-probabilities))) %>%
  gather(key = "predictors", value = "predictor.value", -logit)
ggplot(mydata, aes(logit, predictor.value)) + geom_point(size = 0.5, alpha = 0.5) + geom_smooth(method = "loess") + theme_bw() + facet_wrap(~predictors, scales = "free_y")

##check correlation of variables (correlation test or vif)
##assumption 3 no collinearity between variables 
##check linearity between continuous predictor variable and the log odds of the outcomes (box-tidwell test or  graphs)
##assumption 4 continuous predictor variable linearly related to the log odds of the outcomes
##correlation
library(car)
install.packages("sjstats")
library(sjstats)
cor.test(pooled, method = "spearman")
performance::icc(pooled)
as_tibble(pooled)

##ICC
library(DescTools)
ICC(binlogTEST, type = c("all", conf.level = 0.95, na.rm = TRUE))
print(fit1, digits = 3)
install.packages("irr")
library("irr")
install.packages("psych")
library("psych")
ICC(binlogtest)

##boxtidwell
library(car)
boxTidwell(q1rg91 ~ rs175 + rs179 + rs180 + rs181, ~ as.factorfs030 + fs004 + fs071 + peerstat + q1073 + q1098_total + f_rgsc91, data=binlogtest)

##scatterplot 
library(dplyr)
pooled2 <- na.omit(pooled)
fit2 <- with(data = pooled, exp = lme4::glmer(q1rg91 ~ fs030 + fs071 + peerstat + q1073 + q1098_total + f_rgsc91 + rs175 + rs179 + rs180 + rs181 + TotalRutterA + (fs030 | fs004), family = binomial(link="logit"), control = glmerControl(optimizer = "bobyqa"), nAGQ = 0))
summary(fit2)
probabilities <- predict(fit2, type = "response")
predicted.classes <- ifelse(probabilities > 0.5, "pos", "neg")

mydata <- binlogtestIMP2 %>%
  dplyr::select_if(is.numeric)
predictors <- colnames(mydata)

mydata <- mydata %>%
  mutate(logit = log(probabilities/(1-probabilities))) %>%
  gather(key = "predictors", value = "predictor.value", -logit)

ggplot(mydata, aes(logit, predictor.value)) + geom_point(size = 0.5, alpha = 0.5) + geom_smooth(method = "loess") + theme_bw() + facet_wrap(~predictors, scales = "free_y")

##variance inflation factor
install.packages("car")
library(car)
?vif
vif(binlogtest)
install.packages("misty")
library(misty)
install.packages("usdm")
library(usdm)
install.packages("usdm")
check.collin(fit1)
##assess model diagnsotics using pseudo rsquared and AIC BIC
PseudoR2(fit1)
print(poolfit, correlation=TRUE)

##compare MAR assumption to MNAR assumption if possible 
MNAR <- mice(data = aconfB, method = c("pmm"), ums = "-2+1*rs179")
MNARrun <- complete(MNAR, action = "long", include = TRUE)
fit2 <- with(data = MNAR, exp = polr(q1rg91 ~ fs030 + fs004 + fs071 + rs175 + rs179 + rs180 + rs181 + peerstat + q1073 + q1098_total + f_rgsc91 + TotalRutterA, Hess = TRUE))
fit2
poolfit2 <- summary(pool(fit2), conf.int = TRUE, exponentiate = TRUE)
poolfit2
p <- pnorm(abs(ctable[, "t value"]), lower.tail = FALSE) * 2 
ctable <- cbind(ctable, "p value" = p)
ctable
p
exp(cbind(OR = coef(poolfit2), ci))

miss_case_summary(MNARrun)
miss_var_summary(MNARrun)
mcar_test(MNAR)
